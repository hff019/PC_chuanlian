{"remainingRequest":"/home/limary/PhpstormProjects/clxsd.cn/resources/js/front.clxsd/node_modules/_babel-loader@8.0.6@babel-loader/lib/index.js!/home/limary/PhpstormProjects/clxsd.cn/resources/js/system/stores/module/user.js","dependencies":[{"path":"/home/limary/PhpstormProjects/clxsd.cn/resources/js/system/stores/module/user.js","mtime":1554093446601},{"path":"/home/limary/PhpstormProjects/clxsd.cn/resources/js/front.clxsd/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/limary/PhpstormProjects/clxsd.cn/resources/js/front.clxsd/node_modules/_babel-loader@8.0.6@babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { USER_UPDATE, USER_DELETE } from '../types';\nimport { USER_LOGGED, USER, USER_DATA } from '../getter-types'; // Use the server in data.\n\nconst logged = window.TS.logged;\nconst user = window.TS.user; // create state.\n\nconst state = {\n  logged,\n  user,\n  roles: [],\n  status: ''\n}; // create mutations.\n\nconst mutations = {\n  // The func is update user state.\n  [USER_UPDATE](state, user) {\n    state.logged = !!user;\n    state.user = { ...state.user,\n      ...user\n    };\n  },\n\n  // The func is down user (delete user state).\n  [USER_DELETE](state) {\n    state.logged = false;\n    state.user = null;\n  }\n\n}; // Created actions.\n\nconst actions = {\n  // Create update auth user func.\n  [USER_UPDATE]: (context, cb) => cb(user => context.commit(USER_UPDATE, user), context),\n  // Create delete auth user func.\n  [USER_DELETE]: (context, cb) => cb(() => context.commit(USER_DELETE), context)\n}; // Created getters.\n\nconst getters = {\n  // Created auth logged func.\n  [USER_LOGGED]: ({\n    logged\n  }) => logged,\n  // get auth user data.\n  [USER]: ({\n    user\n  }) => user,\n  // get auth user ext datas.\n  [USER_DATA]: ({\n    user = {}\n  }) => {\n    let {\n      datas = []\n    } = user;\n    let newData = {};\n    datas.forEach(data => {\n      newData[data.profile] = {\n        display: data.profile_name,\n        value: data.pivot.user_profile_setting_data,\n        type: data.type,\n        options: data.default_options,\n        updated_at: data.updated_at\n      };\n    });\n    return newData;\n  }\n}; // create store.\n\nconst userStore = {\n  state,\n  mutations,\n  getters,\n  actions\n};\nexport default userStore;",{"version":3,"sources":["/home/limary/PhpstormProjects/clxsd.cn/resources/js/system/stores/module/user.js"],"names":["USER_UPDATE","USER_DELETE","USER_LOGGED","USER","USER_DATA","logged","window","TS","user","state","roles","status","mutations","actions","context","cb","commit","getters","datas","newData","forEach","data","profile","display","profile_name","value","pivot","user_profile_setting_data","type","options","default_options","updated_at","userStore"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,UAAzC;AACA,SAASC,WAAT,EAAsBC,IAAtB,EAA4BC,SAA5B,QAA6C,iBAA7C,C,CAEA;;AACA,MAAMC,MAAM,GAAGC,MAAM,CAACC,EAAP,CAAUF,MAAzB;AACA,MAAMG,IAAI,GAAGF,MAAM,CAACC,EAAP,CAAUC,IAAvB,C,CAGA;;AACA,MAAMC,KAAK,GAAG;AACVJ,EAAAA,MADU;AAEVG,EAAAA,IAFU;AAGVE,EAAAA,KAAK,EAAC,EAHI;AAIVC,EAAAA,MAAM,EAAE;AAJE,CAAd,C,CAOA;;AACA,MAAMC,SAAS,GAAG;AAChB;AACE,GAACZ,WAAD,EAAeS,KAAf,EAAsBD,IAAtB,EAA4B;AACxBC,IAAAA,KAAK,CAACJ,MAAN,GAAe,CAAC,CAACG,IAAjB;AACAC,IAAAA,KAAK,CAACD,IAAN,GAAa,EACT,GAAGC,KAAK,CAACD,IADA;AAET,SAAGA;AAFM,KAAb;AAIH,GARa;;AASd;AACA,GAACP,WAAD,EAAeQ,KAAf,EAAsB;AAClBA,IAAAA,KAAK,CAACJ,MAAN,GAAe,KAAf;AACAI,IAAAA,KAAK,CAACD,IAAN,GAAa,IAAb;AACH;;AAba,CAAlB,C,CAgBA;;AACA,MAAMK,OAAO,GAAG;AACd;AACE,GAACb,WAAD,GAAe,CAACc,OAAD,EAAUC,EAAV,KAAiBA,EAAE,CAChCP,IAAI,IAAIM,OAAO,CAACE,MAAR,CAAehB,WAAf,EAA4BQ,IAA5B,CADwB,EAEhCM,OAFgC,CAFtB;AAMZ;AACA,GAACb,WAAD,GAAe,CAACa,OAAD,EAAUC,EAAV,KAAiBA,EAAE,CAC9B,MAAMD,OAAO,CAACE,MAAR,CAAef,WAAf,CADwB,EAE9Ba,OAF8B;AAPtB,CAAhB,C,CAaA;;AACA,MAAMG,OAAO,GAAG;AACZ;AACA,GAACf,WAAD,GAAe,CAAC;AAAEG,IAAAA;AAAF,GAAD,KAAgBA,MAFnB;AAIZ;AACA,GAACF,IAAD,GAAQ,CAAC;AAAEK,IAAAA;AAAF,GAAD,KAAcA,IALV;AAOd;AACE,GAACJ,SAAD,GAAa,CAAC;AAAEI,IAAAA,IAAI,GAAG;AAAT,GAAD,KAAmB;AAC5B,QAAI;AAAEU,MAAAA,KAAK,GAAG;AAAV,QAAiBV,IAArB;AACA,QAAIW,OAAO,GAAG,EAAd;AACAD,IAAAA,KAAK,CAACE,OAAN,CAAcC,IAAI,IAAI;AAClBF,MAAAA,OAAO,CAACE,IAAI,CAACC,OAAN,CAAP,GAAwB;AACpBC,QAAAA,OAAO,EAAEF,IAAI,CAACG,YADM;AAEpBC,QAAAA,KAAK,EAAEJ,IAAI,CAACK,KAAL,CAAWC,yBAFE;AAGpBC,QAAAA,IAAI,EAAEP,IAAI,CAACO,IAHS;AAIpBC,QAAAA,OAAO,EAAER,IAAI,CAACS,eAJM;AAKpBC,QAAAA,UAAU,EAAEV,IAAI,CAACU;AALG,OAAxB;AAOH,KARD;AAUA,WAAOZ,OAAP;AACH;AAtBW,CAAhB,C,CAyBA;;AACA,MAAMa,SAAS,GAAG;AACdvB,EAAAA,KADc;AAEdG,EAAAA,SAFc;AAGdK,EAAAA,OAHc;AAIdJ,EAAAA;AAJc,CAAlB;AAOA,eAAemB,SAAf","sourcesContent":["import { USER_UPDATE, USER_DELETE } from '../types';\nimport { USER_LOGGED, USER, USER_DATA } from '../getter-types';\n\n// Use the server in data.\nconst logged = window.TS.logged;\nconst user = window.TS.user;\n\n\n// create state.\nconst state = {\n    logged,\n    user,\n    roles:[],\n    status: '',\n};\n\n// create mutations.\nconst mutations = {\n  // The func is update user state.\n    [USER_UPDATE] (state, user) {\n        state.logged = !!user;\n        state.user = {\n            ...state.user,\n            ...user\n        };\n    },\n    // The func is down user (delete user state).\n    [USER_DELETE] (state) {\n        state.logged = false;\n        state.user = null;\n    }\n};\n\n// Created actions.\nconst actions = {\n  // Create update auth user func.\n    [USER_UPDATE]: (context, cb) => cb(\n      user => context.commit(USER_UPDATE, user),\n      context\n    ),\n    // Create delete auth user func.\n    [USER_DELETE]: (context, cb) => cb(\n        () => context.commit(USER_DELETE),\n        context\n    )\n};\n\n// Created getters.\nconst getters = {\n    // Created auth logged func.\n    [USER_LOGGED]: ({ logged }) => logged,\n\n    // get auth user data.\n    [USER]: ({ user }) => user,\n\n  // get auth user ext datas.\n    [USER_DATA]: ({ user = {} }) => {\n        let { datas = [] } = user;\n        let newData = {};\n        datas.forEach(data => {\n            newData[data.profile] = {\n                display: data.profile_name,\n                value: data.pivot.user_profile_setting_data,\n                type: data.type,\n                options: data.default_options,\n                updated_at: data.updated_at\n            };\n        });\n\n        return newData;\n    }\n};\n\n// create store.\nconst userStore = {\n    state,\n    mutations,\n    getters,\n    actions\n};\n\nexport default userStore;\n"]}]}