{"remainingRequest":"/home/limary/PhpstormProjects/clxsd.cn/resources/js/front.clxsd/node_modules/_babel-loader@8.0.6@babel-loader/lib/index.js!/home/limary/PhpstormProjects/clxsd.cn/resources/js/system/api/auth.js","dependencies":[{"path":"/home/limary/PhpstormProjects/clxsd.cn/resources/js/system/api/auth.js","mtime":1554093446605},{"path":"/home/limary/PhpstormProjects/clxsd.cn/resources/js/front.clxsd/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/limary/PhpstormProjects/clxsd.cn/resources/js/front.clxsd/node_modules/_babel-loader@8.0.6@babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import store from '../stores';\nimport request, { createRequestURI } from \"./request\";\nimport { USER_LOGGED } from \"../stores/getter-types\";\nimport { USER_DELETE } from \"../stores/types\";\n\nconst login = (access, password) => request.post(createRequestURI('login'), {\n  account: access,\n  password\n}, {\n  validateStatus: status => status === 201\n});\n/**\n * 返回用户是否已经登陆\n *\n * @returns {*}\n */\n\n\nconst logged = () => store.getters[USER_LOGGED];\n/**\n * 退出登录方法\n *\n * @param cb\n */\n\n\nconst logout = cb => {\n  store.dispatch(USER_DELETE, cb);\n};\n/**\n * auth验证器\n *\n * @param to\n * @param from\n * @param next\n */\n\n\nexport function requireAuth(to, from, next) {\n  if (!logged()) {\n    window.location.replace('/auth/login');\n  } else {\n    next();\n  }\n}\n;\n/**\n * 登录情况下不允许访问的路由前置验证\n *\n * @param to\n * @param from\n * @param next\n */\n\nexport function loggedAuth(to, from, next) {\n  if (logged()) {\n    next({\n      path: from.fullPath\n    });\n  } else {\n    next();\n  }\n}\n;\nexport default {\n  login,\n  logged,\n  logout\n};",{"version":3,"sources":["/home/limary/PhpstormProjects/clxsd.cn/resources/js/system/api/auth.js"],"names":["store","request","createRequestURI","USER_LOGGED","USER_DELETE","login","access","password","post","account","validateStatus","status","logged","getters","logout","cb","dispatch","requireAuth","to","from","next","window","location","replace","loggedAuth","path","fullPath"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,WAAlB;AACA,OAAOC,OAAP,IAAiBC,gBAAjB,QAAwC,WAAxC;AACA,SAAQC,WAAR,QAA0B,wBAA1B;AACA,SAAQC,WAAR,QAA0B,iBAA1B;;AAGA,MAAMC,KAAK,GAAG,CAACC,MAAD,EAASC,QAAT,KAAsBN,OAAO,CAACO,IAAR,CAChCN,gBAAgB,CAAC,OAAD,CADgB,EAEhC;AAACO,EAAAA,OAAO,EAAEH,MAAV;AAAkBC,EAAAA;AAAlB,CAFgC,EAGhC;AAAEG,EAAAA,cAAc,EAAEC,MAAM,IAAIA,MAAM,KAAK;AAAvC,CAHgC,CAApC;AAMA;;;;;;;AAKA,MAAMC,MAAM,GAAG,MAAMZ,KAAK,CAACa,OAAN,CAAcV,WAAd,CAArB;AAGA;;;;;;;AAKA,MAAMW,MAAM,GAAIC,EAAD,IAAQ;AACnBf,EAAAA,KAAK,CAACgB,QAAN,CAAeZ,WAAf,EAA4BW,EAA5B;AACH,CAFD;AAIA;;;;;;;;;AAOA,OAAO,SAASE,WAAT,CAAsBC,EAAtB,EAA0BC,IAA1B,EAAgCC,IAAhC,EAAsC;AACzC,MAAI,CAACR,MAAM,EAAX,EAAe;AACXS,IAAAA,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB,aAAxB;AACH,GAFD,MAEO;AACHH,IAAAA,IAAI;AACP;AACJ;AAAA;AAED;;;;;;;;AAOA,OAAO,SAASI,UAAT,CAAqBN,EAArB,EAAyBC,IAAzB,EAA+BC,IAA/B,EAAqC;AACxC,MAAIR,MAAM,EAAV,EAAc;AACVQ,IAAAA,IAAI,CAAC;AACDK,MAAAA,IAAI,EAAEN,IAAI,CAACO;AADV,KAAD,CAAJ;AAGH,GAJD,MAIO;AACHN,IAAAA,IAAI;AACP;AACJ;AAAA;AAED,eAAe;AACXf,EAAAA,KADW;AACJO,EAAAA,MADI;AACIE,EAAAA;AADJ,CAAf","sourcesContent":["import store from '../stores';\nimport request, {createRequestURI} from \"./request\";\nimport {USER_LOGGED} from \"../stores/getter-types\";\nimport {USER_DELETE} from \"../stores/types\";\n\n\nconst login = (access, password) => request.post(\n    createRequestURI('login'),\n    {account: access, password},\n    { validateStatus: status => status === 201}\n);\n\n/**\n * 返回用户是否已经登陆\n *\n * @returns {*}\n */\nconst logged = () => store.getters[USER_LOGGED];\n\n\n/**\n * 退出登录方法\n *\n * @param cb\n */\nconst logout = (cb) => {\n    store.dispatch(USER_DELETE, cb);\n};\n\n/**\n * auth验证器\n *\n * @param to\n * @param from\n * @param next\n */\nexport function requireAuth (to, from, next) {\n    if (!logged()) {\n        window.location.replace('/auth/login');\n    } else {\n        next();\n    }\n};\n\n/**\n * 登录情况下不允许访问的路由前置验证\n *\n * @param to\n * @param from\n * @param next\n */\nexport function loggedAuth (to, from, next) {\n    if (logged()) {\n        next({\n            path: from.fullPath\n        });\n    } else {\n        next();\n    }\n};\n\nexport default {\n    login, logged, logout\n};"]}]}